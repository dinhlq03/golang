// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.8
// source: helloworld/helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	HeyDinh(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	FetchResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_FetchResponseClient, error)
	RateLaptop(ctx context.Context, opts ...grpc.CallOption) (Greeter_RateLaptopClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) HeyDinh(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/HeyDinh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) FetchResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_FetchResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], "/helloworld.Greeter/FetchResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterFetchResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_FetchResponseClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type greeterFetchResponseClient struct {
	grpc.ClientStream
}

func (x *greeterFetchResponseClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) RateLaptop(ctx context.Context, opts ...grpc.CallOption) (Greeter_RateLaptopClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], "/helloworld.Greeter/RateLaptop", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterRateLaptopClient{stream}
	return x, nil
}

type Greeter_RateLaptopClient interface {
	Send(*RateLaptopRequest) error
	Recv() (*RateLaptopResponse, error)
	grpc.ClientStream
}

type greeterRateLaptopClient struct {
	grpc.ClientStream
}

func (x *greeterRateLaptopClient) Send(m *RateLaptopRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterRateLaptopClient) Recv() (*RateLaptopResponse, error) {
	m := new(RateLaptopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	HeyDinh(context.Context, *HelloRequest) (*HelloReply, error)
	FetchResponse(*Request, Greeter_FetchResponseServer) error
	RateLaptop(Greeter_RateLaptopServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) HeyDinh(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeyDinh not implemented")
}
func (UnimplementedGreeterServer) FetchResponse(*Request, Greeter_FetchResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchResponse not implemented")
}
func (UnimplementedGreeterServer) RateLaptop(Greeter_RateLaptopServer) error {
	return status.Errorf(codes.Unimplemented, "method RateLaptop not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_HeyDinh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).HeyDinh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/HeyDinh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).HeyDinh(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_FetchResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).FetchResponse(m, &greeterFetchResponseServer{stream})
}

type Greeter_FetchResponseServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type greeterFetchResponseServer struct {
	grpc.ServerStream
}

func (x *greeterFetchResponseServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_RateLaptop_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).RateLaptop(&greeterRateLaptopServer{stream})
}

type Greeter_RateLaptopServer interface {
	Send(*RateLaptopResponse) error
	Recv() (*RateLaptopRequest, error)
	grpc.ServerStream
}

type greeterRateLaptopServer struct {
	grpc.ServerStream
}

func (x *greeterRateLaptopServer) Send(m *RateLaptopResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterRateLaptopServer) Recv() (*RateLaptopRequest, error) {
	m := new(RateLaptopRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "HeyDinh",
			Handler:    _Greeter_HeyDinh_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchResponse",
			Handler:       _Greeter_FetchResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RateLaptop",
			Handler:       _Greeter_RateLaptop_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/helloworld.proto",
}
